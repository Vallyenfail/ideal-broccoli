tic_tac = [['_' for x in range(3)] for i in range(3)]
doodles = ['O', 'X']

counter_x = 0
counter_o = 0
turn_counter = 0

draw = False
x_wins = False
o_wins = False

game_state = [x_wins, o_wins, draw]
exclamation = ['X wins', 'O wins', 'Draw']


def change_turn():
    global turn_counter
    turn = ['X', 'O']
    while not any(game_state):
        if turn_counter % 2 == 0:
            turn_counter += 1
            return turn[0]
        else:
            turn_counter += 1
            return turn[1]


def count_blanks():
    counter_z = 0
    for i in range(3):
        for j in range(3):
            if tic_tac[i][j] == '_':
                counter_z += 1
    return counter_z


def print_field(field):
    print('---------')
    for i in range(0, 3):
        msg = '| '
        for j in range(0, 3):
            msg += field[i][j] + ' '
        msg += '|'
        print(msg)
    print('---------')


def check_input(x):
    check = False
    not_number = False
    occupied = False
    big_number = False
    checks = [not_number, big_number, occupied]
    reactions = ['You should enter numbers!', 'Coordinates should be from 1 to 3!',
                 'This cell is occupied! Choose another one!']
    for i in range(len(x)):
        try:
            int(x[i])
        except ValueError:
            checks[0] = True
            check = True
        else:
            try:
                if tic_tac[int(x[0]) - 1][int(x[1]) - 1] != '_':
                    checks[2] = True
                    check = True
            except IndexError:
                checks[1] = True
                check = True
            else:
                if 3 < int(x[i]) or int(x[i]) < 1:
                    checks[1] = True
                    check = True
    for x in range(len(checks)):
        if checks[x] is True:
            print(reactions[x])
    return check


while not any(game_state):
    print('Enter coordinates. Rows first then columns')
    print_field(tic_tac)
    coordinates = [x for x in input().split()]

    while check_input(coordinates):
        coordinates = [x for x in input().split()]
    coordinates = [eval(x) - 1 for x in coordinates]

    tic_tac[coordinates[0]][coordinates[1]] = change_turn()

    for z in range(2):
        for i in range(3):
            if tic_tac[0][0] == tic_tac[1][1] == tic_tac[2][2] == doodles[z - 1] or\
             tic_tac[0][2] == tic_tac[1][1] == tic_tac[2][0] == doodles[z - 1] or\
             tic_tac[0][i] == tic_tac[1][i] == tic_tac[2][i] == doodles[z - 1] or\
             tic_tac[i][0] == tic_tac[i][1] == tic_tac[i][2] == doodles[z - 1]:
                game_state[z] = True

    count_blanks()

    for x in tic_tac:
        for y in x:
            if game_state[0] is False and game_state[1] is False and count_blanks() == 0:
                game_state[2] = True


print_field(tic_tac)

for x in range(len(game_state)):
    if game_state[x] is True:
        print(exclamation[x])
